-- Autogenerated by migration tool on 2022-01-19 11:45:05

-- Resource: account
CREATE TABLE IF NOT EXISTS "digitalocean_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"droplet_limit" bigint,
	"floating_ip_limit" bigint,
	"volume_limit" bigint,
	"email" text,
	"uuid" text,
	"email_verified" boolean,
	"status" text,
	"status_message" text,
	CONSTRAINT digitalocean_accounts_pk PRIMARY KEY(cq_fetch_date,uuid),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_accounts');

-- Resource: balance
CREATE TABLE IF NOT EXISTS "digitalocean_balance" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"month_to_date_balance" text,
	"account_balance" text,
	"month_to_date_usage" text,
	"generated_at" timestamp without time zone,
	CONSTRAINT digitalocean_balance_pk PRIMARY KEY(cq_fetch_date,generated_at),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_balance');

-- Resource: billing_history
CREATE TABLE IF NOT EXISTS "digitalocean_billing_history" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"description" text,
	"amount" text,
	"invoice_id" text,
	"invoice_uuid" text,
	"date" timestamp without time zone,
	"type" text,
	CONSTRAINT digitalocean_billing_history_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_billing_history');

-- Resource: cdns
CREATE TABLE IF NOT EXISTS "digitalocean_cdn" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"origin" text,
	"endpoint" text,
	"created_at" timestamp without time zone,
	"ttl" bigint,
	"certificate_id" text,
	"custom_domain" text,
	CONSTRAINT digitalocean_cdn_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_cdn');

-- Resource: certificates
CREATE TABLE IF NOT EXISTS "digitalocean_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"name" text,
	"dns_names" text[],
	"not_after" text,
	"s_h_a1_fingerprint" text,
	"created" text,
	"state" text,
	"type" text,
	CONSTRAINT digitalocean_certificates_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_certificates');

-- Resource: databases
CREATE TABLE IF NOT EXISTS "digitalocean_databases" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"name" text,
	"engine" text,
	"version" text,
	"connection_uri" text,
	"connection_database" text,
	"connection_host" text,
	"connection_port" bigint,
	"connection_user" text,
	"connection_password" text,
	"connection_ssl" boolean,
	"private_connection_uri" text,
	"private_connection_database" text,
	"private_connection_host" text,
	"private_connection_port" bigint,
	"private_connection_user" text,
	"private_connection_password" text,
	"private_connection_ssl" boolean,
	"num_nodes" bigint,
	"size_slug" text,
	"db_names" text[],
	"region_slug" text,
	"status" text,
	"maintenance_window_day" text,
	"maintenance_window_hour" text,
	"maintenance_window_pending" boolean,
	"maintenance_window_description" text[],
	"created_at" timestamp without time zone,
	"private_network_uuid" text,
	"tags" text[],
	CONSTRAINT digitalocean_databases_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_databases');
CREATE TABLE IF NOT EXISTS "digitalocean_database_users" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"database_cq_id" uuid,
	"name" text,
	"role" text,
	"my_sql_settings_auth_plugin" text,
	CONSTRAINT digitalocean_database_users_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_database_users (cq_fetch_date, database_cq_id);
SELECT setup_tsdb_child('digitalocean_database_users', 'database_cq_id', 'digitalocean_databases', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_database_backups" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"database_cq_id" uuid,
	"created_at" timestamp without time zone,
	"size_gigabytes" float,
	CONSTRAINT digitalocean_database_backups_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_database_backups (cq_fetch_date, database_cq_id);
SELECT setup_tsdb_child('digitalocean_database_backups', 'database_cq_id', 'digitalocean_databases', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_database_replicas" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"database_cq_id" uuid,
	"name" text,
	"connection_uri" text,
	"connection_database" text,
	"connection_host" text,
	"connection_port" bigint,
	"connection_user" text,
	"connection_password" text,
	"connection_ssl" boolean,
	"private_connection_uri" text,
	"private_connection_database" text,
	"private_connection_host" text,
	"private_connection_port" bigint,
	"private_connection_user" text,
	"private_connection_password" text,
	"private_connection_ssl" boolean,
	"region" text,
	"status" text,
	"created_at" timestamp without time zone,
	"private_network_uuid" text,
	"tags" text[],
	CONSTRAINT digitalocean_database_replicas_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_database_replicas (cq_fetch_date, database_cq_id);
SELECT setup_tsdb_child('digitalocean_database_replicas', 'database_cq_id', 'digitalocean_databases', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_database_firewall_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"database_cq_id" uuid,
	"uuid" text,
	"cluster_uuid" text,
	"type" text,
	"value" text,
	"created_at" timestamp without time zone,
	CONSTRAINT digitalocean_database_firewall_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_database_firewall_rules (cq_fetch_date, database_cq_id);
SELECT setup_tsdb_child('digitalocean_database_firewall_rules', 'database_cq_id', 'digitalocean_databases', 'cq_id');

-- Resource: domains
CREATE TABLE IF NOT EXISTS "digitalocean_domains" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"name" text,
	"ttl" bigint,
	"zone_file" text,
	CONSTRAINT digitalocean_domains_pk PRIMARY KEY(cq_fetch_date,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_domains');
CREATE TABLE IF NOT EXISTS "digitalocean_domain_records" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"domain_cq_id" uuid,
	"id" bigint,
	"type" text,
	"name" text,
	"data" text,
	"priority" bigint,
	"port" bigint,
	"ttl" bigint,
	"weight" bigint,
	"flags" bigint,
	"tag" text,
	CONSTRAINT digitalocean_domain_records_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_domain_records (cq_fetch_date, domain_cq_id);
SELECT setup_tsdb_child('digitalocean_domain_records', 'domain_cq_id', 'digitalocean_domains', 'cq_id');

-- Resource: droplets
CREATE TABLE IF NOT EXISTS "digitalocean_droplets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" bigint,
	"name" text,
	"memory" bigint,
	"vcpus" bigint,
	"disk" bigint,
	"region_slug" text,
	"region_name" text,
	"region_sizes" text[],
	"region_available" boolean,
	"region_features" text[],
	"image_id" bigint,
	"image_name" text,
	"image_type" text,
	"image_distribution" text,
	"image_slug" text,
	"image_public" boolean,
	"image_regions" text[],
	"image_min_disk_size" bigint,
	"image_size_giga_bytes" float,
	"image_created" text,
	"image_description" text,
	"image_tags" text[],
	"image_status" text,
	"image_error_message" text,
	"size_memory" bigint,
	"size_vcpus" bigint,
	"size_disk" bigint,
	"size_price_monthly" float,
	"size_price_hourly" float,
	"size_regions" text[],
	"size_available" boolean,
	"size_transfer" float,
	"size_description" text,
	"size_slug" text,
	"backup_ids" integer[],
	"next_backup_window_start_time" timestamp without time zone,
	"next_backup_window_end_time" timestamp without time zone,
	"snapshot_ids" integer[],
	"features" text[],
	"locked" boolean,
	"status" text,
	"created" text,
	"kernel_id" bigint,
	"kernel_name" text,
	"kernel_version" text,
	"tags" text[],
	"volume_ids" text[],
	"vpc_uuid" text,
	CONSTRAINT digitalocean_droplets_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_droplets');
CREATE TABLE IF NOT EXISTS "digitalocean_droplet_networks_v4" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"droplet_cq_id" uuid,
	"ip_address" inet,
	"netmask" inet,
	"gateway" inet,
	"type" text,
	CONSTRAINT digitalocean_droplet_networks_v4_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_droplet_networks_v4 (cq_fetch_date, droplet_cq_id);
SELECT setup_tsdb_child('digitalocean_droplet_networks_v4', 'droplet_cq_id', 'digitalocean_droplets', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_droplet_networks_v6" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"droplet_cq_id" uuid,
	"ip_address" inet,
	"netmask" bigint,
	"gateway" inet,
	"type" text,
	CONSTRAINT digitalocean_droplet_networks_v6_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_droplet_networks_v6 (cq_fetch_date, droplet_cq_id);
SELECT setup_tsdb_child('digitalocean_droplet_networks_v6', 'droplet_cq_id', 'digitalocean_droplets', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_droplet_neighbors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"droplet_cq_id" uuid,
	"droplet_id" bigint,
	"neighbor_id" bigint,
	CONSTRAINT digitalocean_droplet_neighbors_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_droplet_neighbors (cq_fetch_date, droplet_cq_id);
SELECT setup_tsdb_child('digitalocean_droplet_neighbors', 'droplet_cq_id', 'digitalocean_droplets', 'cq_id');

-- Resource: firewalls
CREATE TABLE IF NOT EXISTS "digitalocean_firewalls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" uuid,
	"name" text,
	"status" text,
	"droplet_ids" integer[],
	"tags" text[],
	"created" text,
	CONSTRAINT digitalocean_firewalls_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_firewalls');
CREATE TABLE IF NOT EXISTS "digitalocean_firewall_inbound_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"firewall_cq_id" uuid,
	"protocol" text,
	"port_range" text,
	"sources_addresses" text[],
	"sources_tags" text[],
	"sources_droplet_ids" integer[],
	"sources_load_balancer_uid_s" text[],
	"sources_kubernetes_ids" text[],
	CONSTRAINT digitalocean_firewall_inbound_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_firewall_inbound_rules (cq_fetch_date, firewall_cq_id);
SELECT setup_tsdb_child('digitalocean_firewall_inbound_rules', 'firewall_cq_id', 'digitalocean_firewalls', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_firewall_outbound_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"firewall_cq_id" uuid,
	"protocol" text,
	"port_range" text,
	"destinations_addresses" text[],
	"destinations_tags" text[],
	"destinations_droplet_ids" integer[],
	"destinations_load_balancer_uid_s" text[],
	"destinations_kubernetes_ids" text[],
	CONSTRAINT digitalocean_firewall_outbound_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_firewall_outbound_rules (cq_fetch_date, firewall_cq_id);
SELECT setup_tsdb_child('digitalocean_firewall_outbound_rules', 'firewall_cq_id', 'digitalocean_firewalls', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_firewall_pending_changes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"firewall_cq_id" uuid,
	"droplet_id" bigint,
	"removing" boolean,
	"status" text,
	CONSTRAINT digitalocean_firewall_pending_changes_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_firewall_pending_changes (cq_fetch_date, firewall_cq_id);
SELECT setup_tsdb_child('digitalocean_firewall_pending_changes', 'firewall_cq_id', 'digitalocean_firewalls', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_firewall_droplets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"firewall_cq_id" uuid,
	"droplet_id" bigint,
	"firewall_id" uuid,
	CONSTRAINT digitalocean_firewall_droplets_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_firewall_droplets (cq_fetch_date, firewall_cq_id);
SELECT setup_tsdb_child('digitalocean_firewall_droplets', 'firewall_cq_id', 'digitalocean_firewalls', 'cq_id');

-- Resource: floating_ips
CREATE TABLE IF NOT EXISTS "digitalocean_floating_ips" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"droplet_id" bigint,
	"region_slug" text,
	"region_name" text,
	"region_sizes" text[],
	"region_available" boolean,
	"region_features" text[],
	"ip" cidr,
	CONSTRAINT digitalocean_floating_ips_pk PRIMARY KEY(cq_fetch_date,ip),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_floating_ips');

-- Resource: images
CREATE TABLE IF NOT EXISTS "digitalocean_images" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" bigint,
	"name" text,
	"type" text,
	"distribution" text,
	"slug" text,
	"public" boolean,
	"regions" text[],
	"min_disk_size" bigint,
	"size_giga_bytes" float,
	"created" text,
	"description" text,
	"tags" text[],
	"status" text,
	"error_message" text,
	CONSTRAINT digitalocean_images_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_images');

-- Resource: keys
CREATE TABLE IF NOT EXISTS "digitalocean_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" bigint,
	"name" text,
	"fingerprint" text,
	"public_key" text,
	CONSTRAINT digitalocean_keys_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_keys');

-- Resource: load_balancers
CREATE TABLE IF NOT EXISTS "digitalocean_load_balancers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" uuid,
	"name" text,
	"ip" inet,
	"size" text,
	"algorithm" text,
	"status" text,
	"created" text,
	"health_check_protocol" text,
	"health_check_port" bigint,
	"health_check_path" text,
	"health_check_check_interval_seconds" bigint,
	"health_check_response_timeout_seconds" bigint,
	"health_check_healthy_threshold" bigint,
	"health_check_unhealthy_threshold" bigint,
	"sticky_sessions_type" text,
	"sticky_sessions_cookie_name" text,
	"sticky_sessions_cookie_ttl_seconds" bigint,
	"region_slug" text,
	"region_name" text,
	"region_sizes" text[],
	"region_available" boolean,
	"region_features" text[],
	"droplet_ids" integer[],
	"tag" text,
	"tags" text[],
	"redirect_http_to_https" boolean,
	"enable_proxy_protocol" boolean,
	"enable_backend_keepalive" boolean,
	"vpc_uuid" text,
	CONSTRAINT digitalocean_load_balancers_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_load_balancers');
CREATE TABLE IF NOT EXISTS "digitalocean_load_balancer_forwarding_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"load_balancer_cq_id" uuid,
	"entry_protocol" text,
	"entry_port" bigint,
	"target_protocol" text,
	"target_port" bigint,
	"certificate_id" text,
	"tls_passthrough" boolean,
	CONSTRAINT digitalocean_load_balancer_forwarding_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_load_balancer_forwarding_rules (cq_fetch_date, load_balancer_cq_id);
SELECT setup_tsdb_child('digitalocean_load_balancer_forwarding_rules', 'load_balancer_cq_id', 'digitalocean_load_balancers', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_load_balancer_droplets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"load_balancer_cq_id" uuid,
	"droplet_id" bigint,
	"load_balancer_id" uuid,
	CONSTRAINT digitalocean_load_balancer_droplets_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_load_balancer_droplets (cq_fetch_date, load_balancer_cq_id);
SELECT setup_tsdb_child('digitalocean_load_balancer_droplets', 'load_balancer_cq_id', 'digitalocean_load_balancers', 'cq_id');

-- Resource: projects
CREATE TABLE IF NOT EXISTS "digitalocean_projects" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"owner_uuid" text,
	"owner_id" bigint,
	"name" text,
	"description" text,
	"purpose" text,
	"environment" text,
	"is_default" boolean,
	"created_at" text,
	"updated_at" text,
	CONSTRAINT digitalocean_projects_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_projects');
CREATE TABLE IF NOT EXISTS "digitalocean_project_resources" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_cq_id" uuid,
	"urn" text,
	"assigned_at" timestamp without time zone,
	"links_self" text,
	"status" text,
	CONSTRAINT digitalocean_project_resources_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_project_resources (cq_fetch_date, project_cq_id);
SELECT setup_tsdb_child('digitalocean_project_resources', 'project_cq_id', 'digitalocean_projects', 'cq_id');

-- Resource: regions
CREATE TABLE IF NOT EXISTS "digitalocean_regions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"slug" text,
	"name" text,
	"sizes" text[],
	"available" boolean,
	"features" text[],
	CONSTRAINT digitalocean_regions_pk PRIMARY KEY(cq_fetch_date,slug),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_regions');

-- Resource: registry
CREATE TABLE IF NOT EXISTS "digitalocean_registry" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"name" text,
	"storage_usage_bytes" bigint,
	"storage_usage_bytes_updated_at" timestamp without time zone,
	"created_at" timestamp without time zone,
	CONSTRAINT digitalocean_registry_pk PRIMARY KEY(cq_fetch_date,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_registry');
CREATE TABLE IF NOT EXISTS "digitalocean_registry_repositories" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"registry_cq_id" uuid,
	"registry_name" text,
	"name" text,
	"latest_tag_registry_name" text,
	"latest_tag_repository" text,
	"latest_tag" text,
	"latest_tag_manifest_digest" text,
	"latest_tag_compressed_size_bytes" bigint,
	"latest_tag_size_bytes" bigint,
	"latest_tag_updated_at" timestamp without time zone,
	"tag_count" bigint,
	CONSTRAINT digitalocean_registry_repositories_pk PRIMARY KEY(cq_fetch_date,registry_cq_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_registry_repositories (cq_fetch_date, registry_cq_id);
SELECT setup_tsdb_child('digitalocean_registry_repositories', 'registry_cq_id', 'digitalocean_registry', 'cq_id');

-- Resource: sizes
CREATE TABLE IF NOT EXISTS "digitalocean_sizes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"slug" text,
	"memory" bigint,
	"vcpus" bigint,
	"disk" bigint,
	"price_monthly" float,
	"price_hourly" float,
	"regions" text[],
	"available" boolean,
	"transfer" float,
	"description" text,
	CONSTRAINT digitalocean_sizes_pk PRIMARY KEY(cq_fetch_date,slug),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_sizes');

-- Resource: snapshots
CREATE TABLE IF NOT EXISTS "digitalocean_snapshots" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"name" text,
	"resource_id" text,
	"resource_type" text,
	"regions" text[],
	"min_disk_size" bigint,
	"size_giga_bytes" float,
	"created" text,
	"tags" text[],
	CONSTRAINT digitalocean_snapshots_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_snapshots');

-- Resource: spaces
CREATE TABLE IF NOT EXISTS "digitalocean_spaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"name" text,
	"creation_date" timestamp without time zone,
	"location" text,
	"public" boolean,
	CONSTRAINT digitalocean_spaces_pk PRIMARY KEY(cq_fetch_date,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_spaces');
CREATE TABLE IF NOT EXISTS "digitalocean_space_cors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"space_cq_id" uuid,
	"space_name" text,
	"allowed_methods" text[],
	"allowed_origins" text[],
	"allowed_headers" text[],
	"max_age_seconds" integer,
	CONSTRAINT digitalocean_space_cors_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_space_cors (cq_fetch_date, space_cq_id);
SELECT setup_tsdb_child('digitalocean_space_cors', 'space_cq_id', 'digitalocean_spaces', 'cq_id');
CREATE TABLE IF NOT EXISTS "digitalocean_space_acls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"space_cq_id" uuid,
	"space_name" text,
	"permission" text,
	"type" text,
	"display_name" text,
	"email_address" text,
	"grantee_id" text,
	"uri" text,
	CONSTRAINT digitalocean_space_acls_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_space_acls (cq_fetch_date, space_cq_id);
SELECT setup_tsdb_child('digitalocean_space_acls', 'space_cq_id', 'digitalocean_spaces', 'cq_id');

-- Resource: volumes
CREATE TABLE IF NOT EXISTS "digitalocean_volumes" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"region_slug" text,
	"region_name" text,
	"region_sizes" text[],
	"region_available" boolean,
	"region_features" text[],
	"name" text,
	"size_giga_bytes" bigint,
	"description" text,
	"droplet_ids" integer[],
	"created_at" timestamp without time zone,
	"filesystem_type" text,
	"filesystem_label" text,
	"tags" text[],
	CONSTRAINT digitalocean_volumes_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_volumes');
CREATE TABLE IF NOT EXISTS "digitalocean_volume_droplets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"volume_cq_id" uuid,
	"droplet_id" bigint,
	"volume_id" text,
	CONSTRAINT digitalocean_volume_droplets_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_volume_droplets (cq_fetch_date, volume_cq_id);
SELECT setup_tsdb_child('digitalocean_volume_droplets', 'volume_cq_id', 'digitalocean_volumes', 'cq_id');

-- Resource: vpcs
CREATE TABLE IF NOT EXISTS "digitalocean_vpcs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"id" text,
	"urn" text,
	"name" text,
	"description" text,
	"ip_range" cidr,
	"region_slug" text,
	"created_at" timestamp without time zone,
	"default" boolean,
	CONSTRAINT digitalocean_vpcs_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('digitalocean_vpcs');
CREATE TABLE IF NOT EXISTS "digitalocean_vpc_members" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"vpc_cq_id" uuid,
	"type" text,
	"id" text,
	"urn" text,
	"name" text,
	"created_at" timestamp without time zone,
	CONSTRAINT digitalocean_vpc_members_pk PRIMARY KEY(cq_fetch_date,id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON digitalocean_vpc_members (cq_fetch_date, vpc_cq_id);
SELECT setup_tsdb_child('digitalocean_vpc_members', 'vpc_cq_id', 'digitalocean_vpcs', 'cq_id');
